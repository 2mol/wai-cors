language: c

# explicitly request container-based infrastructure
sudo: false

matrix:
  include:
    - env: CABALVER=1.18 GHCVER=7.8.4 WAIBOUND=2
      compiler: ": #GHC 7.8.4 WAI 2"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.4], sources: [hvr-ghc]}}

    - env: CABALVER=1.18 GHCVER=7.8.4 WAIBOUND=3
      compiler: ": #GHC 7.8.4 WAI 3"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.3 WAIBOUND=3
      compiler: ": #GHC 7.10.3 WAI 3"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3],sources: [hvr-ghc]}}

    - env: CABALVER=1.18 GHCVER=7.8.4 WAIBOUND=9
      compiler: ": #GHC 7.8.4 WAI 9"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.3 WAIBOUND=9
      compiler: ": #GHC 7.10.3 WAI 9"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3],sources: [hvr-ghc]}}

    - env: CABALVER=1.24 GHCVER=8.0.2 WAIBOUND=9
      compiler: ": #GHC 8.0.2 WAI 9"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2],sources: [hvr-ghc]}}

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

before_install:
  - unset CC
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

  # print phantomjs 2 version
  - phantomjs --version

install:

  # For older versions of wai and GHC we have to help the dependency solver a bit:
  - if [ "$WAIBOUND" = "2" ] ; then export CONSTRAINTS="--constraint=wai==1.4.1 -f+wai-1 -f-wai-2"; fi
  - if [ "$WAIBOUND" = "3" ] ; then export CONSTRAINTS="--constraint=wai==2.1.0.3 -f-wai-1 -f+wai-2 --constraint=http-types<0.9"; fi

  - echo "constraints ${CONSTRAINTS}"
  - cabal --version
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"

  # Cache Logic

  - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
    then
      zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
           $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
    fi
  - travis_retry cabal update -v
  - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
  - cabal install --only-dependencies --constraint="wai<$WAIBOUND" $CONSTRAINTS --max-backjumps=10000 --dry -v > installplan.txt
  - cabal install --enable-tests --only-dependencies --constraint="wai<$WAIBOUND" $CONSTRAINTS $ALLOW_NEWER --max-backjumps=10000 --dry -v > installplan.txt
  - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

  # check whether current requested install-plan matches cached package-db snapshot
  - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
    then
      echo "cabal build-cache HIT";
      rm -rfv .ghc;
      cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
      cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
    else
      echo "cabal build-cache MISS";
      rm -rf $HOME/.cabsnap;
      mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
      cabal install --enable-tests --only-dependencies --constraint="wai<$WAIBOUND" $CONSTRAINTS $ALLOW_NEWER --max-backjumps=10000 --jobs=2;
    fi

  # snapshot package-db on cache miss
  - if [ ! -d $HOME/.cabsnap ];
    then
       echo "snapshotting package-db to build-cache";
       mkdir -p $HOME/.cabsnap;
       cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
       cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
    fi

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
  - cabal configure -v2 --constraint="wai<$WAIBOUND" $CONSTRAINTS
  - cabal build
  - cabal configure -v2 --enable-tests --constraint="wai<$WAIBOUND" $CONSTRAINTS $ALLOW_NEWER
  - cabal build
  - cabal test --show-details=always
  - cabal check
  - cabal sdist

  # check that the generated source-distribution can be built & installed
  - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
    (cd dist && cabal install --force-reinstalls "$SRC_TGZ" --enable-tests --constraint="wai<$WAIBOUND" $CONSTRAINTS $ALLOW_NEWER --max-backjumps=10000)

